/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { PayableOverrides } from "../../common";
import type { Faucet, FaucetInterface } from "../../Faucet.sol/Faucet";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lastWithdrawTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405267016345785d8a0000600155336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3670de0b6b3a7640000341015610116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010d90610178565b60405180910390fd5b610198565b600082825260208201905092915050565b7f496e697469616c2066756e64696e672072657175697265640000000000000000600082015250565b600061016260188361011b565b915061016d8261012c565b602082019050919050565b6000602082019050818103600083015261019181610155565b9050919050565b61098b806101a76000396000f3fe6080604052600436106100595760003560e01c80631031ec31146100b35780633ccfd60b146100f0578063853828b6146101075780638da5cb5b1461011e578063f2fde38b14610149578063f848d54114610172576100ae565b366100ae573373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040516100a4919061065c565b60405180910390a2005b600080fd5b3480156100bf57600080fd5b506100da60048036038101906100d591906106da565b61019d565b6040516100e7919061065c565b60405180910390f35b3480156100fc57600080fd5b506101056101b5565b005b34801561011357600080fd5b5061011c610368565b005b34801561012a57600080fd5b5061013361045f565b6040516101409190610716565b60405180910390f35b34801561015557600080fd5b50610170600480360381019061016b91906106da565b610483565b005b34801561017e57600080fd5b5061018761063d565b604051610194919061065c565b60405180910390f35b60026020528060005260406000206000915090505481565b610e10600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546102029190610760565b421015610244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023b906107f1565b60405180910390fd5b600154471015610289576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102809061085d565b60405180910390fd5b42600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc6001549081150290604051600060405180830381858888f19350505050158015610315573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436460015460405161035e919061065c565b60405180910390a2565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ed906108c9565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561045c573d6000803e3d6000fd5b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610511576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610508906108c9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057790610935565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60015481565b6000819050919050565b61065681610643565b82525050565b6000602082019050610671600083018461064d565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106a78261067c565b9050919050565b6106b78161069c565b81146106c257600080fd5b50565b6000813590506106d4816106ae565b92915050565b6000602082840312156106f0576106ef610677565b5b60006106fe848285016106c5565b91505092915050565b6107108161069c565b82525050565b600060208201905061072b6000830184610707565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061076b82610643565b915061077683610643565b925082820190508082111561078e5761078d610731565b5b92915050565b600082825260208201905092915050565b7f576974686472617720636f6f6c646f776e000000000000000000000000000000600082015250565b60006107db601183610794565b91506107e6826107a5565b602082019050919050565b6000602082019050818103600083015261080a816107ce565b9050919050565b7f46617563657420656d7074790000000000000000000000000000000000000000600082015250565b6000610847600c83610794565b915061085282610811565b602082019050919050565b600060208201905081810360008301526108768161083a565b9050919050565b7f4e6f7420636f6e7472616374206f776e65720000000000000000000000000000600082015250565b60006108b3601283610794565b91506108be8261087d565b602082019050919050565b600060208201905081810360008301526108e2816108a6565b9050919050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b600061091f600f83610794565b915061092a826108e9565b602082019050919050565b6000602082019050818103600083015261094e81610912565b905091905056fea2646970667358221220733da8053edbccbebd8d1271288cd9918542e226c0ddf8d486b9aa935013169964736f6c63430008140033";

type FaucetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FaucetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Faucet__factory extends ContractFactory {
  constructor(...args: FaucetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: PayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Faucet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Faucet__factory {
    return super.connect(runner) as Faucet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FaucetInterface {
    return new Interface(_abi) as FaucetInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Faucet {
    return new Contract(address, _abi, runner) as unknown as Faucet;
  }
}
